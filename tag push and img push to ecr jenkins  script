pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-1"
        ECR_REPO_URL = "600627335208.dkr.ecr.${AWS_REGION}.amazonaws.com/veera"
        GIT_URL = 'https://github.com/ravularajesh3333/Ganesh.git'
        AWS_CREDENTIALS_ID = "aws-credentials"
        GIT_CREDENTIALS_ID = "github-id"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        
    }

    parameters {
        string(name: 'TAG_NAME', defaultValue: "", description: "Tag name to create")
        string(name: 'BRANCH_NAME', defaultValue: "", description: "Branch name")
        string(name: 'COMMIT_MESSAGE', defaultValue: "", description: "Commit message")
        string(name: 'IMAGE_NAME', defaultValue: "", description: "Docker image name")
    }

    stages {

        stage('Checkout Git Branch') {
            steps {
                script {
                    def branchName = "${BRANCH_NAME}".trim()
                    if (!branchName) {
                        error "Branch name is required"
                    }
                    echo "Checking out branch: ${branchName}"
                    git branch: branchName, url: "${GIT_URL}", credentialsId: GIT_CREDENTIALS_ID
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}"
                    sh "docker build -t ${IMAGE_NAME} -f /var/lib/jenkins/Dockerfile ."
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    def tagName = "${TAG_NAME}".trim()
                    if (!tagName) {
                        tagName = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    }
                    def imageTag = "${ECR_REPO_URL}:${tagName}"
                    echo "Tagging Docker image as: ${imageTag}"
                    sh "docker tag ${IMAGE_NAME} ${imageTag}"
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                        echo "Logging in to Amazon ECR"
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URL}"
                        def tagName = "${TAG_NAME}".trim() ?: sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        def imageTag = "${ECR_REPO_URL}:${tagName}"
                        echo "Pushing image to ECR: ${imageTag}"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }

        stage('Create and Push Git Tag') {
            steps {
                script {
                    def tagName = "${TAG_NAME}".trim()
                    if (!tagName) {
                        tagName = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    }
                    def tagExists = sh(returnStatus: true, script: "git show-ref --tags ${tagName}")

                    if (tagExists == 0) {
                        echo "Tag ${tagName} already exists, skipping creation."
                    } else {
                        echo "Creating new Git tag: ${tagName}"
                        sh "git tag -a ${tagName} -m '${COMMIT_MESSAGE}'"

                        withCredentials([usernamePassword(credentialsId: GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/ravularajesh3333/Ganesh.git ${tagName}"
                        }
                    }
                }
            }
        }
        
        stage('Execute ansible-playbook') {
            steps {
                script {
                    ansiColor('xterm') {
                        
                        sh "ansible-playbook -i /var/lib/jenkins/ansible/inventory /var/lib/jenkins/ansible/dummy.yaml --extra-vars 'tag_name=${TAG_NAME}'"

                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}




ansible file or yaml file (clone docker image from ecr repo and deploy image in cotainer

---
- name: docker image deploy into server
  hosts: localhost
  become: true
  gather_facts: no
  vars:
    aws_region: "us-east-1"
    ecr_repository_url: "600627335208.dkr.ecr.us-east-1.amazonaws.com/veera"
    image_tag: "{{ tag_name }}"
    container_name: "veera-ecr"
    exposed_port: 80

  tasks:
    - name: Authenticate Docker with AWS ECR
      shell: |
        aws ecr get-login-password --region "{{ aws_region }}" | docker login --username AWS --password-stdin "{{ ecr_repository_url }}"

      register: ecr_login

    - name: Pull the Docker image from ECR
      docker_image:
        name: "{{ ecr_repository_url }}"
        tag: "{{ image_tag }}"
        source: pull
      when: ecr_login is succeeded

    - name: Stop and remove the existing Docker container (if it already exists)
      docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: Deploy the Docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ ecr_repository_url }}:{{ image_tag }}"
        state: started
        ports:
          - "{{ exposed_port }}:80"



